import { FiEdit } from "react-icons/fi";
import { useSelector } from "react-redux";
import { PuffLoader } from "react-spinners";
import { useState } from "react";
import { FaTimes } from "react-icons/fa";
import { SaveIcon } from "lucide-react";
import type { RootState } from "../../../app/store";
import { userApi } from "../../../features/api/userApi";

// üß© User Interface
interface UserInterface {
  userId: number;
  profileImage: string;
  firstname: string;
  lastname: string;
  email: string;
  password: string;
  contactPhone: string;
  address: string;
  userType: string;
  emailVerified: boolean;
  createdAt: string;
  updatedAt: string;
  bookings: {
    totalAmount: string;
    createdAt: string;    // booking start
    updatedAt: string;    // booking end
    bookingId: number;
    bookingDate: string;
    returnDate: string;
  }[];
}

// üî¢ Utility to calculate number of days between two dates
const calculateDaysBooked = (start: string, end: string) => {
  const startDate = new Date(start);
  const endDate = new Date(end);
  return Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
};

// üî¢ Calculates total number of booked days by the user
const calculateTotalDaysBooked = (user: UserInterface) => {
  if (!user.bookings || user.bookings.length === 0) return 0;
  return user.bookings.reduce((total, booking) => {
    return total + calculateDaysBooked(booking.bookingDate, booking.returnDate);
  }, 0);
};

// üî¢ Calculates total number of bookings
const calculateTotalBookings = (user: UserInterface) => {
  return user.bookings?.length || 0;
};

// üí∞ Calculates total revenue generated by user
const calculateTotalRevenue = (user: UserInterface) => {
  if (!user.bookings || user.bookings.length === 0) return 0;
  return user.bookings.reduce((total, booking) => {
    return total + parseFloat(booking.totalAmount || "0");
  }, 0);
};

// üè∑Ô∏è Badge color based on userType
const getUserTypeBadge = (userType: string) => {
  switch (userType) {
    case "admin": return "badge-success";
    case "disabled": return "badge-error";
    case "member": return "badge-warning";
    default: return "badge-primary";
  }
};

export const Users = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const { isAuthenticated } = useSelector((state: RootState) => state.auth);

  // Fetch all users with profiles
  const { data: usersData = [], isLoading: userDataIsLoading, error } = userApi.useGetAllUsersProfilesQuery({
    skip: !isAuthenticated,
  });

  const handleModalToggle = () => setIsModalOpen(!isModalOpen);
  const handleSubmit = async () => { };

  return (
    <>
      <div className="text-2xl font-bold text-center mb-4 text-orange-400">All Users Page</div>
      <div className="overflow-x-auto">
        <table className="table">
          {/* Table Header */}
          <thead>
            <tr>
              <th>#</th>
              <th>User</th>
              <th>Joined On</th>
              <th>User Type</th>
              <th>Total Bookings</th>
              <th>Total Days Booked</th>
              <th>Total Revenue</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {error ? (
              <tr>
                <td colSpan={8} className="text-center text-red-500">
                  error while fetching your User..try again
                </td>
              </tr>
            ) : userDataIsLoading ? (
              <tr>
                <td colSpan={8} className="text-center">
                  <PuffLoader color="#0aff13" />
                </td>
              </tr>
            ) : usersData.length === 0 ? (
              <tr><td colSpan={8}>No Users available üòé</td></tr>
            ) : (
              usersData.map((user: UserInterface) => (
                <tr key={user.userId}>
                  <th>{user.userId}</th>

                  {/* üßç‚Äç‚ôÇÔ∏è Profile, Name, Email */}
                  <td>
                    <div className="flex items-center gap-3">
                      <div className="avatar">
                        <div className="mask mask-squircle h-12 w-12">
                          <img src={user.profileImage} alt="User Avatar" />
                        </div>
                      </div>
                      <div>
                        <div className="font-bold text-orange-500">
                          {user.firstname} {user.lastname}
                        </div>
                        <div className="text-sm opacity-50">{user.email}</div>
                      </div>
                    </div>
                  </td>

                  {/* üïì Joined On */}
                  <td>{new Date(user.createdAt).toLocaleString()}</td>

                  {/* üè∑Ô∏è User Type */}
                  <td>
                    <div className={`badge badge-outline ${getUserTypeBadge(user.userType)}`}>
                      {user.userType}
                    </div>
                  </td>

                  {/* üî¢ Total Bookings */}
                  <td>{calculateTotalBookings(user)}</td>

                  {/* üìÖ Total Days Booked */}
                  <td>{calculateTotalDaysBooked(user)}</td>

                  {/* üíµ Total Revenue */}
                  <td>
                    <span className="font-semibold text-green-600">
                      ${calculateTotalRevenue(user).toFixed(2)}
                    </span>
                  </td>

                  {/* ‚úèÔ∏è Edit Button */}
                  <td>
                    <button className="text-blue-700 hover:text-blue-500 btn btn-sm btn-outline"
                      onClick={handleModalToggle}
                    >
                      <FiEdit />
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* üõ†Ô∏è Modal for editing user type */}
      {isModalOpen && (
        <div className="modal modal-open">
          <div className="modal-box">
            <div className="flex justify-center items-center mb-4">
              <h2 className="text-2xl font-bold text-orange-500">Change User Type</h2>
            </div>
            <form onSubmit={() => handleSubmit()}>
              <div className="mb-4">
                <label htmlFor="firstName" className="block text-sm font-medium text-orange-500">User Type</label>
                <select>
                  <option value="">Select UserType</option>
                  <option value="admin">Admin</option>
                  <option value="member">Member</option>
                  <option value="disabled">Disabled</option>
                </select>
              </div>
              <div className="flex justify-end">
                <button onClick={handleModalToggle} className="btn mr-2 btn-error">
                  <FaTimes /> Cancel
                </button>
                <button type="submit" className="btn btn-primary">
                  <SaveIcon /> Save Profile
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </>
  );
};
